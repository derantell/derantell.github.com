<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Department 1337]]></title>
  <link href="http://derantell.github.com/atom.xml" rel="self"/>
  <link href="http://derantell.github.com/"/>
  <updated>2012-12-02T23:15:47+01:00</updated>
  <id>http://derantell.github.com/</id>
  <author>
    <name><![CDATA[David Tellander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started with Octopress on Windows]]></title>
    <link href="http://derantell.github.com/blog/2012/12/02/getting-started-with-octopress-on-windows/"/>
    <updated>2012-12-02T22:56:00+01:00</updated>
    <id>http://derantell.github.com/blog/2012/12/02/getting-started-with-octopress-on-windows</id>
    <content type="html"><![CDATA[<p>This blog is using the <a href="http://octopress.org/">Octopress</a> framework for the <a href="https://github.com/mojombo/jekyll">Jekyll</a> static site generator. When setting everything up I followed the <a href="http://octopress.org/docs/setup/">Octopress setup guide</a> and <a href="http://blog.zerosharp.com/setting-up-octopress-on-windows/">Rob Anderson&#8217;s instructions</a> on how to do this on a Windows 7 machine. In this post I&#8217;ll describe a few tweaks I had to make to get it all set up.</p>

<!-- More -->


<h2>The hellip command</h2>

<p>Cloning the repo and installing the dependencies and the theme went without any problems. I experienced a slight hiccup when running the <code>setup_github_pages</code> task. The command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s2">&quot;echo &#39;My Octopress Page is coming soon &amp;hellip;&#39; &gt; index.html&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>failed with the error message</p>

<pre><code>'hellip' is not recognized as an internal or external command, operable program or batch file.
</code></pre>

<p>So the easy thing to do is to just replace the <code>&amp;hellip;</code> with &#8216;&#8230;&#8217; in Rakefile.</p>

<figure class='code'><figcaption><span>Replacing hellip</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -335,7 +335,7 @@ task :setup_github_pages, :repo do |t, args|</span>
</span><span class='line'>   mkdir deploy_dir
</span><span class='line'>   cd &quot;#{deploy_dir}&quot; do
</span><span class='line'>     system &quot;git init&quot;
</span><span class='line'><span class="gd">-    system &quot;echo &#39;My Octopress Page is coming soon &amp;hellip;&#39; &gt; index.html&quot;</span>
</span><span class='line'><span class="gi">+    system &quot;echo &#39;My Octopress Page is coming soon ...&#39; &gt; index.html&quot;</span>
</span><span class='line'>     system &quot;git add .&quot;
</span><span class='line'>     system &quot;git commit -m \&quot;Octopress init\&quot;&quot;
</span><span class='line'>     system &quot;git branch -m gh-pages&quot; unless branch == &#39;master&#39;
</span></code></pre></td></tr></table></div></figure>


<h2>Using HTTPS instead of SSH</h2>

<p>The next problem rose when I tried to run the deploy task to deploy the first time to GitHub. For some reason that I couldn&#8217;t really figure out, I was denied access when trying to push the site to GitHub. Something to do with the SSH key.</p>

<pre><code>##Pushing generated _deploy website
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>So I went back to the Rakefile to change the method from SSH to HTTPS. This meant that I had to change the regular expression that extracted the user name from the repository URL.</p>

<figure class='code'><figcaption><span>Changing the repository URL regex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -303,8 +303,8 @@ task :setup_github_pages, :repo do |t, args|</span>
</span><span class='line'>     puts &quot;(For example, &#39;git@github.com:your_username/your_username.github.com)&quot;
</span><span class='line'>     repo_url = get_stdin(&quot;Repository url: &quot;)
</span><span class='line'>   end
</span><span class='line'><span class="gd">-  user = repo_url.match(/:([^\/]+)/)[1]</span>
</span><span class='line'><span class="gd">-  branch = (repo_url.match(/\/[\w-]+.github.com/).nil?) ? &#39;gh-pages&#39; : &#39;master&#39;</span>
</span><span class='line'><span class="gi">+  user = repo_url.match(/https:\/\/github\.com\/([^\/]+)/)[1]</span>
</span><span class='line'><span class="gi">+  branch = (repo_url.match(/\/[\w-]+\.github\.com/).nil?) ? &#39;gh-pages&#39; : &#39;master&#39;</span>
</span><span class='line'>   project = (branch == &#39;gh-pages&#39;) ? repo_url.match(/\/([^\.]+)/)[1] : &#39;&#39;
</span><span class='line'>   unless `git remote -v`.match(/origin.+?octopress.git/).nil?
</span><span class='line'>     # If octopress is still the origin remote (from cloning) rename it to octopress
</span></code></pre></td></tr></table></div></figure>


<p>After that fix the site deployed to GitHub without errors.</p>

<h2>No syntax highlighting</h2>

<p>When I started to write the first post I noticed that syntax highlighting didn&#8217;t work, neither triple-backtick nor codeblocks. Rob Anderson mentioned this in his post and his solution worked for me too, with the twist that I had to reboot my computer after installing Python 2.7.</p>

<h2>Workflow</h2>

<p>Even though I just started the blog, I already love the workflow. Editing markdown in a text editor is so much nicer than using some awful web based WYSIWIG tool. I keep my local repository in a dropbox folder, which makes it easy for me to edit posts on devices that do not have Ruby and Git installed.</p>

<p>To edit posts I use <a href="http://www.sublimetext.com/">Sublime Text 2</a>. Previously I have been using the <a href="https://github.com/michfield/StrapdownPreview">Strapdown.js Preview package</a> to preview markdown in the browser, but it does not handle the Octopress syntax highlighting extensions very well.</p>

<p>Today I discovered <a href="http://livereload.com/">LiveReload</a>. LiveReload monitors the file system and refreshes the browser when changes are detected. A <a href="https://github.com/dz0ny/LiveReload-sublimetext2">Sublime package for LiveReload</a> is available which handles the communication with the browser. Combining this with Octopress&#8217; preview task that regenerates the site when markdown changes are detected is pretty cool. When I save the markdown file, the browser refreshes with the updated post.</p>

<p>Now I just need to customize the theme a little.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Powershell cmdlet to remove meaningless fluff from C# files]]></title>
    <link href="http://derantell.github.com/blog/2012/11/28/a-powershell-cmdlet-to-remove-meaningless-fluff-from-c-files/"/>
    <updated>2012-11-28T23:01:00+01:00</updated>
    <id>http://derantell.github.com/blog/2012/11/28/a-powershell-cmdlet-to-remove-meaningless-fluff-from-c-files</id>
    <content type="html"><![CDATA[<p>In C# you can add folding points to the code file by using the <code>#region</code> directive. The question of <a href="http://stackoverflow.com/questions/755465/do-you-say-no-to-c-sharp-regions">how and when</a> (<a href="http://www.codinghorror.com/blog/2008/07/the-problem-with-code-folding.html">if ever</a>) to use this feature is an endless debate among C# developers. Some find it useful for grouping members with related functionality or by accessibility level, some just hate them.</p>

<!-- More -->


<p>My personal opinion is that regions are pretty much useless. When I open a file in the editor I expect to see the code. Not a bunch of gray text blocks, which is the default behavior in Visual Studio. Hiding generated code that is never to be touched or non-implemented members from a poorly designed abstract base class with too many responsibilities, are a couple of use cases that I think are justified. A few years ago I found out that you could disable folding/outlining by navigating to <em>tools > options > text editor > c# > advanced</em> and uncheck the <em>Enter outlining mode when files open</em> option. I&#8217;ve left it like that ever since. There is also the <a href="http://visualstudiogallery.msdn.microsoft.com/0ca60d35-1e02-43b7-bf59-ac7deb9afbca">I Hate #Regions</a> Visual Studio extension that does the same thing, more or less.</p>

<h2>The regionalize everything style</h2>

<p>I recently inherited an ASP.NET MVC project where the C# code uses an interesting region pattern. Every member of a class is surrounded by a region, where the region label matches the signature of the member. The regions were generated by a macro together with XML documentation comments for the members.</p>

<figure class='code'><figcaption><span>Region wrapped method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#region public int GetSum( int x, int y )</span>
</span><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span>
</span><span class='line'><span class="c1">/// &lt;param name=&quot;y&quot;&gt;&lt;/param&gt;</span>
</span><span class='line'><span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="kt">int</span> <span class="nf">GetSumEx</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">absolute</span> <span class="p">)</span> <span class="p">{</span>       
</span><span class='line'>  <span class="k">return</span> <span class="n">absolute</span> <span class="p">?</span> <span class="n">Math</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span><span class="n">x</span><span class="p">+</span><span class="n">y</span><span class="p">)</span> <span class="p">:</span> <span class="n">x</span><span class="p">+</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endregion</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except for the regions I&#8217;m OK with documentation comments. <em>Good</em> documentation comments on the public members of an API is very nice to have since the intellisense picks them up and you can see it inline while coding.</p>

<p>However, in this codebase many comment elements are left empty, adding a lot of meaningless noise to the code. Another annoyance as seen in the somewhat contrived example is that when the method has been refactored, the region label and comments have not been updated.</p>

<p>This kind of region (mis)use is way to obtrusive to me, so I decided to clean it up.</p>

<h2>The cmdlet</h2>

<p>What we want to do is remove all regions and empty documentation comments from the C# files of the solution. Sounds like a perfect time for me to learn how to <a href="http://blogs.technet.com/b/heyscriptingguy/archive/2011/05/10/use-the-pipeline-to-create-robust-powershell-functions.aspx">make a Powershell cmdlet that processes pipeline input</a>. The goal is to be able to write something like this:</p>

<pre><code>&gt; ls c:\myproject -r -i *.cs | remove-regions
</code></pre>

<p>That is, get all descendant .cs files of a directory and pipe them into the <code>remove-regions</code> cmdlet.</p>

<p>After a little experimenting I ended up with this:</p>

<figure class='code'><figcaption><span>Remove-Regions </span><a href='https://github.com/derantell/MyPsUtils/blob/master/Derantell.psm1'>derantell.psm1</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="nb">Remove-Regions</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="k">CmdletBinding</span><span class="p">(</span><span class="n">SupportsShouldProcess</span><span class="p">=</span><span class="nv">$True</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">Param</span><span class="p">(</span>
</span><span class='line'>        <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span> <span class="k">Mandatory</span><span class="p">=</span><span class="nv">$True</span><span class="p">,</span> <span class="k">ValueFromPipeline</span><span class="p">=</span><span class="nv">$True</span><span class="p">,</span> <span class="p">=</span><span class="nv">$True</span><span class="p">)]</span>
</span><span class='line'>        <span class="no">[string[]]</span>
</span><span class='line'>        <span class="nv">$Filename</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">[string]</span>
</span><span class='line'>        <span class="nv">$Encoding</span> <span class="p">=</span> <span class="s2">&quot;UTF8&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">PROCESS</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$regex</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Regularexpressions</span><span class="p">.</span><span class="n">Regex</span><span class="p">(</span>
</span><span class='line'>            <span class="s2">&quot;\s*(?:#(?:end)?region|///\s*&lt;([^/\s&gt;]+).*?&gt;(?s:[\s/]*?&lt;/\1&gt;)).*&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$file</span> <span class="k">in</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$filepath</span> <span class="p">=</span> <span class="nb">resolve-path</span> <span class="nv">$file</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="n">ShouldProcess</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">,</span> <span class="s2">&quot;Remove regions&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$regex</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="no">[System.IO.File]</span><span class="err">::</span><span class="n">ReadAllText</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">)`</span>
</span><span class='line'>                        <span class="p">|</span> <span class="nb">out-file</span> <span class="nv">$file</span> <span class="n">-force</span> <span class="n">-encoding</span> <span class="nv">$Encoding</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">write-warning</span> <span class="s2">&quot;Failed to sanitize $filepath: $_&quot;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">write-output</span> <span class="nv">$file</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>CmdletBinding</code> attribute <a href="http://www.windowsitpro.com/blog/powershell-with-a-purpose-blog-36/windows-powershell/powershells-[cmdletbinding]-142114">adds some useful capabilities</a> to the function, e.g. by setting the <code>SupportsShouldProcess</code> flag to true we can use the <code>-WhatIf</code> and <code>-Confirm</code> switches when calling our cmdlet.</p>

<p>In the <code>Parameter</code> attribute we specify that <code>$Filename</code> is a required parameter that accepts input from the powershell pipeline. The other parameter - <code>$Encoding</code> - has the default value <em>UTF8</em> and sets the output encoding used when writing the modified file.</p>

<p>In order to match and replace the offending lines in the file I need to dust off my old regex-fu.</p>

<h3>Decoding the regex</h3>

<p>The regular expression looks like this:</p>

<pre><code>\s*(?:#(?:end)?region|///\s*&lt;([^/\s&gt;]+).*?&gt;[\s/]*?&lt;/\1&gt;).*
</code></pre>

<p>The expression starts off by trying to match <code>\s*</code> - zero or more whitespace. It then enters a <a href="http://www.regular-expressions.info/brackets.html">non-capturing group</a> <code>(?:</code> where the first alternative <code>#(?:end)?region</code>, tries to match either a <code>#region</code> directive or an <code>#endregion</code> directive.</p>

<p>The second alternative should match empty document comment elements. It does this by first matching the triple slash comment <code>///\s*</code> used for documentation.</p>

<p>Next comes the start tag <code>&lt;([^/\s&gt;]+).*?&gt;</code>. The tag name is saved in group 1 for future reference and the <a href="http://www.regular-expressions.info/charclass.html">character class</a> <code>[^/\s&gt;]+</code> says &#8220;match one or more characters that is not a / (we want to match the <em>start tag</em>), a whitespace (not a valid XML-name character) or a > (the tag end.)&#8221; Some elements has attributes so we match <code>.*?&gt;</code>, i.e. any character after the name up to the next >.</p>

<p>As we saw in the example earlier, some elements are empty and spanning multiple rows. Therefore, to match the content of an empty element, we use the character class <code>[\s/]*?</code>. I.e. zero or more whitespace (including line breaks) or / characters.</p>

<p>The last thing to match is the end tag of the element, which i done by <code>&lt;/\1&gt;</code>. Here we use a <a href="http://www.regular-expressions.info/brackets.html">back reference</a> to the tag name we captured when we matched the start tag of the element.</p>

<p>Lastly we close the grouping that wraps the expression and match the rest of the line <code>).*</code>.</p>

<p>The result looks like this in <a href="http://www.regexbuddy.com">RegexBuddy</a>, my weapon of choice when it comes to constructing and testing regexes.</p>

<p><img src="http://derantell.github.com/images/regionregex.PNG" alt="Screenshot of RegexBuddy" /></p>

<p>Blue and yellow text are matches to the regex. You can <a href="https://github.com/derantell/MyPsUtils">get the code at GitHub</a> if you face similar problems.</p>
]]></content>
  </entry>
  
</feed>
