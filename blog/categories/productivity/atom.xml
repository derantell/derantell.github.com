<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Department 1337]]></title>
  <link href="http://derantell.github.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://derantell.github.com/"/>
  <updated>2013-07-23T23:41:23+02:00</updated>
  <id>http://derantell.github.com/</id>
  <author>
    <name><![CDATA[David Tellander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I switched from a Swedish to a US keyboard]]></title>
    <link href="http://derantell.github.com/blog/2013/07/23/why-i-switched-from-a-swedish-to-a-us-keyboard/"/>
    <updated>2013-07-23T23:30:00+02:00</updated>
    <id>http://derantell.github.com/blog/2013/07/23/why-i-switched-from-a-swedish-to-a-us-keyboard</id>
    <content type="html"><![CDATA[<p>Over the years I have noticed that the more experienced I get, the lazier I get when it comes to interacting with a computer. Reaching for the mouse becomes more and more awkward. The more you can do with your hands on the keyboard the better, right?</p>

<!-- more -->


<p>Most the time I spend in front of a keyboard---about 80%---I either code or write English text. I only use Swedish in mail conversations and some client focused documentation.</p>

<p>That is why I have become more and more frustrated by the layout of the Swedish keyboard. The main pain points are</p>

<ul>
<li><code>[]</code>, <code>{}</code>, <code>$</code>, <code>|</code> and <code>\</code> are <em>third level</em> (i.e. accessed via <code>AltGr</code> or <code>Ctrl</code>+<code>Alt</code>)</li>
<li><code>^</code>, <code>~</code> and <code>`</code> are <a href="http://en.wikipedia.org/wiki/Dead_key">dead keys</a></li>
<li><code>&lt;&gt;</code> are on the same key (minor inconvenience perhaps, but my brain has never learned which one is shifted.)</li>
<li>Most keyboard shortcut schemes of tools and well designed web applications are made with the US keyboard layout in mind.</li>
</ul>


<p><img class="center" src="/images/KB_Sweden.png" title="Swedish keyboard layout" alt="Swedish keyboard layout"></p>

<p>The reason the Swedish keyboard looks the way it does is because of the three extra vowels Å, Ä and Ö that had to be first level characters on the keyboard.</p>

<p>After having said to myself for years: "Man, I wish I had a US keyboard", the tipping point finally came when I decided to learn vim commands in <a href="http://www.sublimetext.com/docs/2/vintage.html">Sublime Text's Vintage mode</a>. Some useful commands just did not work or were very awkward to type.</p>

<h2>Rewiring the brain</h2>

<p>So I ordered the US version of the keyboard I use, the <a href="http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000">Microsoft Natural Ergonomic Keyboard 4000</a>.</p>

<p>Since I have been <a href="https://en.wikipedia.org/wiki/Touch_typing">touch typing</a> for the last ten years and are quickly approaching 40, I was worried that it was too late for me to learn a new keyboard layout. However, it was surprisingly easy! The first few weeks there were a lot of mistyping, but after about a month the new layout had settled.</p>

<p>The hardest part was to relearn the new positions of Å, Ä and Ö when writing Swedish.</p>

<h2>Layouts</h2>

<p>To be able to type European letters on a US keyboard, the <a href="http://commons.wikimedia.org/wiki/File:KB_US-International.svg">US International keyboard</a> should be set as the input keyboard layout. Here are instructions for how to change keyboard layouts on <a href="http://support.microsoft.com/kb/258824">Windows 7</a>, <a href="http://www.howtogeek.com/121169/how-to-change-your-keyboard-layout-in-windows-8/">Windows 8</a>, and <a href="http://www.wikihow.com/Change-the-Keyboard-Language-of-a-Mac">Mac</a>. In this layout Å, Ä and Ö are on the third level of <code>W</code>, <code>Q</code> and <code>P</code>, respectively.</p>

<p><img class="center" src="/images/KB_US-International.png" title="US International keyboard layout" alt="US International keyboard layout"></p>

<p>An alternative keyboard layout is the <a href="http://eurkey.steffen.bruentjen.eu/start.html">EurKEY layout</a> by Steffen Brüntjen, which is based on the US layout, but adds a lot of accented characters used in European languages. It also adds Greek letters and mathematical symbols which are available after pressing a dead key. E.g. the <code>Alt Gr</code>+<code>m</code> dead key toggles the Greek alphabet, hence <code>Alt Gr</code>+<code>m</code> followed by <code>p</code> produces π.</p>

<h2>Conclusion</h2>

<p>I have now been using EurKEY on a US keyboard for six months. On the positive side</p>

<ul>
<li>coding feels much more natural than before</li>
<li>keyboard shortcuts work as expected in all tools and apps</li>
</ul>


<p>However, there are some issues</p>

<ul>
<li>my current work laptop has a Swedish keyboard, I usually switch back to the Swedish layout when undocking it</li>
<li>remoting into servers that does not have a US layout activated causes me trouble sometimes</li>
<li>pair programming when you don't have two keyboards and are pairing with a programmer that uses a Swedish keyboard</li>
</ul>


<p>All in all, I will stick to the US keyboard as long as I primarily use it to write code and English text. And I encourage other programmers/power users to try the switch if they are in a similar situation as myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Powershell scripts with Launchy]]></title>
    <link href="http://derantell.github.com/blog/2012/12/16/executing-powershell-scripts-with-launchy/"/>
    <updated>2012-12-16T20:50:00+01:00</updated>
    <id>http://derantell.github.com/blog/2012/12/16/executing-powershell-scripts-with-launchy</id>
    <content type="html"><![CDATA[<p>An app launcher is an application that lets you launch applications without taking your hands off the keyboard. Just hit the hot key, type a few characters to match the application or file you want to open and you are done. Most launchers can do a lot more than just launching applications, e.g. open websites if you type an URL, act as a simple calculator or---as we will explore in this post---execute scripts.</p>

<!-- more -->


<h2>Invoking Powershell via Launchy</h2>

<p>I have been using the <a href="http://www.launchy.net/">Launchy app launcher</a> for a few years, but not for more advanced tasks than the Windows Start button can handle. So I decided to try some more advanced uses.</p>

<p>Since Launchy can execute batch files, you can use it to perform almost any task you can think of.</p>

<p>The first thing we need to do is to tell Launchy where to look for the batch files we want to execute. You do that in the settings under the Catalog tab. Add the directory where the scripts are located and add <code>*.cmd</code> and <code>*.bat</code> as file type filters. I keep my scripts in a <a href="http://dropbox.com">Dropbox</a> folder that is also a <a href="https://github.com/derantell/LaunchyScripts">Git repository</a>. That way I have easy access to my scripts on any Windows computer I use.</p>

<p>Next we need to create a <code>.bat</code> or <code>.cmd</code> file that will implement our task. This can be just about anything. Launchy also lets you supply parameters to a command by pressing <code>tab</code> when you have matched the command you want to execute.</p>

<p>In this example I will create a batch file that executes a Powershell script that encodes its argument using Base64 encoding. We start with the simple batch file that will bootstrap the Powershell script:</p>

<p><code>bat Bootstrap batch file https://github.com/derantell/LaunchyScripts/blob/master/base64.cmd base64.cmd
@echo off
powershell.exe -file .\base64.ps1 %1
</code></p>

<p>The batch file just starts a new Powershell process, passing the name of the Powershell script that implements the Base64 encoding task. The first argument of the batch file is passed on to the Powershell script.</p>

<p><a href="http://technet.microsoft.com/en-us/library/dd315276.aspx">Powershell.exe</a> offers three different ways to pass code to be executed.</p>

<ul>
<li>A script file via the <code>-File</code> parameter</li>
<li><a href="http://dmitrysotnikov.wordpress.com/2011/07/06/passing-parameters-to-encodedcommand/">Base64 encoded command</a> via the <code>-EncodedCommand</code> parameter</li>
<li>A string or script block via the <code>-Command</code> parameter</li>
</ul>


<p>The Powershell script first tests whether its argument is the path to an existing file. If it is a file path, the file's content is read and put in a variable. If it is not a file, the text of the argument is encoded using UTF-8. Then the data is Base64 encoded and the result is piped to the clipboard using the <a href="http://blogs.msdn.com/b/tilovell/archive/2011/09/14/work-tool-of-the-day-clip-exe.aspx">clip.exe utility</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Base64 encoding script </span><a href='https://github.com/derantell/LaunchyScripts/blob/master/base64.ps1'>base64.ps1 </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="k">param</span><span class="p">(</span><span class="nv">$text</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">if</span><span class="p">(</span><span class="nb">test-path</span> <span class="nv">$text</span><span class="p">)</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="nv">$path</span> <span class="p">=</span> <span class="nb">resolve-path</span> <span class="nv">$text</span>
</span><span class='line'><span class="nv">$bytes</span> <span class="p">=</span> <span class="no">[System.IO.File]</span><span class="err">::</span><span class="n">ReadAllBytes</span><span class="p">(</span><span class="nv">$path</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span> <span class="k">else</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="nv">$bytes</span> <span class="p">=</span> <span class="no">[System.Text.Encoding]</span><span class="err">::</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now you can just trigger Launchy and type</p>

<p><code>base64 &gt; c:\temp\cute_cat.jpg</code></p>

<p>and the Base64 encoded content of the file is ready for you on the clipboard.</p>

<p>If you are interested <a href="https://github.com/derantell/LaunchyScripts">my scripts are available on GitHub</a> and currently I have implemented four simple text manipulation tasks: <a href="https://github.com/derantell/LaunchyScripts/blob/master/urlencode.cmd">urlencode</a>, <a href="https://github.com/derantell/LaunchyScripts/blob/master/base64.cmd">base64</a>, <a href="https://github.com/derantell/LaunchyScripts/blob/master/slugify.cmd">slugify</a> and <a href="https://github.com/derantell/LaunchyScripts/blob/master/hash.cmd">hash</a>.</p>
]]></content>
  </entry>
  
</feed>
